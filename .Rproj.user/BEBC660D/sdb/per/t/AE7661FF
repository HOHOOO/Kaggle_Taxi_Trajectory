{
    "contents" : "library(data.table)\noptions(stringsAsFactors = F, scipen=9, digits=6)\nsource('util.R')\n#############################\n### TIME\n#############################\n# test[i, TRAVEL_TIME:=as.integer(max(test[i, 15*snapshots], weighted.mean(ds$t, w=1/ds$d^2)))]  \n# write.csv(test[, list(TRIP_ID, TRAVEL_TIME)], 'same_start_all_100.csv', row.names=F)\n\nf <- lm(readings ~ readings_cut, data=valid[readings<999])\n# abline(f)\n\ntest[, p_readings_cut:=predict(f, data.frame(readings_cut))]\nwrite.csv(test[, list(TRIP_ID=trip, TRAVEL_TIME=p_readings_cut*15+7.5)], 'lm_readings_cut.csv', row.names=F)\ntest[, p_readings_from_time:=predict(f, data.frame(readings_cut=readings_from_time))*15+7.5]\nwrite.csv(test[, list(TRIP_ID=trip, TRAVEL_TIME=p_readings_from_time)], 'lm_readings_from_time_fix.csv', row.names=F)\n\ntest[, p_combine:=pmax(p_readings_from_time, p_readings_cut)]\nf2 <- lm(p_combine ~ p_readings_cut, data=test[readings_from_time<=pmax(readings_cut*1.1, readings_cut+40), list(p_readings_cut, p_combine)])\ntest[readings_from_time>pmax(readings_cut*1.1, readings_cut+40), p_combine:=p_readings_cut*1.01+1.94]\ntest[, p_combine:=p_combine*15+7.5]\nwrite.csv(test[, list(TRIP_ID=trip, TRAVEL_TIME=p_combine)], 'lm_readings_combined.csv', row.names=F)\n\ntest[, p_combine2:=p_btb*.3+p_btb_me*.4+p_readings_cut*.3]\nwrite.csv(test[, list(TRIP_ID=trip, TRAVEL_TIME=p_combine2)], 'lm_btb_combined.csv', row.names=F)\n\ntest[, p_combine3:=p_btb*.3+pmax(p_btb_me,p_readings_cut)*.7]\nwrite.csv(test[, list(TRIP_ID=trip, TRAVEL_TIME=p_combine3)], 'lm_btb_combined_max.csv', row.names=F)\n\ntest[, p_combine4:=p_btb*.3+pmin(p_btb_me,p_readings_cut)*.7]\nwrite.csv(test[, list(TRIP_ID=trip, TRAVEL_TIME=p_combine4)], 'lm_btb_combined_min.csv', row.names=F)\n\nplot(test[readings_from_time<=pmax(readings_cut*1.1, readings_cut+40), list(p_readings_cut, p_combine)])\nabline(0,1)\nplot(test[, list(readings_cut, readings_from_time)])\nplot(test[, list(p_readings_cut, p_readings_from_time)])\nplot(test[, list(p_readings_cut, p_combine)])\n\n#############################\n### LOC\n#############################\nlibrary(geosphere)\nlibrary(RgoogleMaps)\nlibrary(colorRamps)\nlibrary(tm)\nlibrary(chron)\npoly <- poly_test\nrm(poly_test)\npoly[, n:=1:.N, id]\npoly <- merge(poly, poly[, list(id, lon, lat, n=n-1)], by=c('id', 'n'), all.x=T, suffix=c('', '2'))\npoly[, d:=get_dist(lon, lat, lon2, lat2)]\npoly[!is.na(lon2), b:=bearing(cbind(lon, lat), cbind(lon2, lat2))]\npoly[, d_sum:=sum(d, na.rm=T), by=id]\npoly[, v:=mean(d, na.rm=T), by=id]\npoly[, b_avg:=weighted.mean(b, w=n, na.rm=T), by=id]\npoly[, max_n:=max(n)-1, by=id]\npoly[, max_n2:=max(n)-2, by=id]\nloc <- poly[n==1, list(id, lon, lat, d_sum, v, b_avg)]\npoly_last <- poly[n==max_n & d!=0, list(id, lon2, lat2, d_last=d, b_last=b)]\npoly_last <- rbind(poly_last, poly[!(id %in% poly_last$id) & n==max_n2, list(id, lon2, lat2, d_last=d, b_last=b)])\npoly_last <- rbind(poly_last, poly[!(id %in% poly_last$id), list(id, lon2=lon, lat2=lat, d_last=d, b_last=b)])\nloc <- merge(loc, poly_last, by='id', all.x=T)\nloc[!is.na(lon2), b_overall:=bearing(cbind(lon, lat), cbind(lon2, lat2))]\nloc[, d_tot:=get_dist(lon, lat, lon2, lat2)]\ntest <- merge(test, loc, by='id', all.x=T)\ntest[, d_ratio:=d_sum/d_tot]\ntest <- dt_set_na(test, col='d_ratio', rep=1)\nrm(loc, poly_last)\nhist(test[, d_sum],100)\nhist(test[, d_tot],100)\nhist(test[, v],100)\nhist(test[, b_avg],100)\nhist(test[, b_overall],100)\nplot(test[, list(b_overall, b_avg)])\nplot(test[, list(b_overall, b_last)])\nplot(test[, list(d_sum, v)])\nplot(test[, list(d_sum, d_tot)])\nabline(0,1)\nplot(test[, list(d_sum, readings)])\nplot(test[, list(d_tot, readings)])\nhist(test[, d_ratio], 100)\nplot(test[, list(d_last, v)])\nabline(0,1)\n\n### trips that went back to the city should have their starting position\n\npoly[id==2, create_map(max_n, lat, lon)]\n\n\ncolfunc<-colorRampPalette(c(\"green\",\"red\"))\n# MyMap <- GetMap(center=\"Porto\", zoom=13, GRAYSCALE=T, destfile = \"plots/Porto.png\")\npoint_size<-1.5\ntest[, d_ratio_round:=round(d_ratio)]\ntest[d_ratio_round>=5, d_ratio_round:=5]\ntest[abs(b_overall-b_avg)<=45, b_change:='none']\ntest[b_overall-b_avg>45, b_change:='right']\ntest[b_avg-b_overall>45, b_change:='left']\nfor (i in 246:nrow(test)){    \n  MyMap <- GetMap(center=c(test[i, lat], test[i, lon]), zoom=13, GRAYSCALE=T, destfile = paste0(\"plots/Porto_\", test[i, id], \".png\"), NEWMAP=T)  \n  #MyMap <- GetMap(center=c(test[i, lat], test[i, lon]), zoom=13, GRAYSCALE=T, destfile = paste0(\"plots/Porto_\", test[i, id], \".png\"), NEWMAP=F)  \n  pdf(file=paste0('plots/map_d', test[i, d_ratio_round], '_b_', test[i, b_change], '_r', test[i, readings_cut], '_r', test[i, readings_from_time], '_dt', test[i, sample_date], '.pdf'))\n  p <- PlotOnStaticMap(MyMap, lat = poly[id==i, lat],lon = poly[id==i, lon], cex=point_size, pch=20, col=colfunc(poly[id==i & n==1, max_n]), add=FALSE)    \n  dev.off()\n  Sys.sleep(1)\n}\n\n\n\n### add one step to final poly\nfin <- test[, destPoint(cbind(lon2, lat2), b_last, d_last, r=6371)]\ntest[, c('lon1', 'lat1'):=list(fin[,1], fin[,2])]\ntest[is.na(lon1), c('lon1', 'lat1'):=list(lon, lat)]\nwrite.csv(test[, list(TRIP_ID=trip, LATITUDE=lat1, LONGITUDE=lon1)], 'final_bearing1.csv', row.names=F)\n\n### add multiple steps to overall bearing\nfin <- test[, destPoint(cbind(lon, lat), b_avg, d_tot*(p_combine2/15/readings_cut), r=6371)]\ntest[, c('lon3', 'lat3'):=list(fin[,1], fin[,2])]\ntest[is.na(lon3), c('lon3', 'lat3'):=list(lon, lat)]\nwrite.csv(test[, list(TRIP_ID=trip, LATITUDE=lat3, LONGITUDE=lon3)], 'avg_bearing1.csv', row.names=F)\n\n### back to start for big round trips\ntest[, c('lon4', 'lat4'):=list(lon1, lat1)]\ntest[(d_ratio_round==5 & d_sum>2)\n     | (d_ratio_round==4 & d_sum>3)\n     | (d_ratio_round==3 & d_sum>5)\n     , c('lon4', 'lat4'):=list(lon, lat)]\nwrite.csv(test[, list(TRIP_ID=trip, LATITUDE=lat4, LONGITUDE=lon4)], 'final_bearing1_returnlong.csv', row.names=F)\n\n### add one step to final poly\nfin <- test[, destPoint(cbind(lon2, lat2), b_last, d_last*10, r=6371)]\ntest[, c('lon5', 'lat5'):=list(fin[,1], fin[,2])]\ntest[is.na(lon5), c('lon5', 'lat5'):=list(lon, lat)]\ntest[(d_ratio_round==5 & d_sum>2)\n     | (d_ratio_round==4 & d_sum>3)\n     | (d_ratio_round==3 & d_sum>5)\n     , c('lon5', 'lat5'):=list(lon, lat)]\nwrite.csv(test[, list(TRIP_ID=trip, LATITUDE=lat5, LONGITUDE=lon5)], 'final_bearing2_returnlong.csv', row.names=F)\n\n\n\n\n\n\ntest[d_ratio_round==5][order(d_sum)][, list(id, sample_date,lon, lat, lon2, lat2, readings, readings_from_time, d_sum, d_tot, v, b_overall, b_avg, b_last)]\ntest[d_ratio_round==4][order(d_sum)][, list(id, sample_date,lon, lat, lon2, lat2, readings, readings_from_time, d_sum, d_tot, v, b_overall, b_avg, b_last)]\ntest[d_ratio_round==3][order(d_sum)][, list(id, sample_date,lon, lat, lon2, lat2, readings, readings_from_time, d_sum, d_tot, v, b_overall, b_avg, b_last)]\ng <- ggplot(poly[id==95]) + geom_point(aes(x=lon, y=lat, col=n))\n",
    "created" : 1434147565008.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "459030590",
    "id" : "AE7661FF",
    "lastKnownWriteTime" : 1434147681,
    "path" : "~/R/Taxi/sub_simple.R",
    "project_path" : "sub_simple.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}